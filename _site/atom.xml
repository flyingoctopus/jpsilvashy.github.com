<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Joseph Silvashy</title>
 <link href="http://jpsilvashy.com/atom.xml" rel="self"/>
 <link href="http://jpsilvashy.com/"/>
 <updated>2012-07-30T01:04:40-07:00</updated>
 <id>http://jpsilvashy.com/</id>
 <author>
   <name>Joseph Silvashy</name>
   <email></email>
 </author>

 
 <entry>
   <title>Deploying a Rails Application on Amazon EC2</title>
   <link href="http://jpsilvashy.com/posts/deploying-a-rails-application-on-amazon-ec2"/>
   <updated>2012-07-30T00:00:00-07:00</updated>
   <id>http://jpsilvashy.com/posts/deploying-a-rails-application-on-amazon-ec2</id>
   <content type="html">&lt;div class='leader_note'&gt;
	This is post 2 of 2, in my series on deploying Rails applications. &lt;a href='/posts/setting-up-ubuntu-with-ruby-193-on-amazon-ec2/'&gt;Go to part 1 &amp;rarr;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;This is a continuation of my previous blog post &lt;a href='/posts/setting-up-ubuntu-with-ruby-193-on-amazon-ec2/'&gt;Setting up Ubuntu with Ruby 1.9.3 on Amazon EC2&lt;/a&gt;, I realize that a lot of people have experience with Amazon EC2 so I decided to break it into several parts, that way if you&amp;#8217;re already comfortable navigating AWS&amp;#8217;s menus, you can zip through or just skip the first part.&lt;/p&gt;

&lt;h2 id='setting_up_capistrano'&gt;Setting up Capistrano&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s jump right in. We&amp;#8217;re going to deploy our rails app using &lt;a href='https://github.com/capistrano/capistrano'&gt;Capistrano&lt;/a&gt;. So in your local rails app, let&amp;#8217;s get capistrano setup. Let&amp;#8217;s add &lt;code&gt;capistrano&lt;/code&gt;, to our &lt;code&gt;Gemfile&lt;/code&gt; in our application.&lt;/p&gt;
&lt;pre&gt;
gem 'capistrano'
&lt;/pre&gt;
&lt;p&gt;Run the &lt;code&gt;bundle&lt;/code&gt; command to update your bundle file, we&amp;#8217;ll talk more about Bundler and the Gemfile later on but for now it&amp;#8217;s important to just look at it as a dependency manager for your app.&lt;/p&gt;
&lt;pre&gt;
bundle
&lt;/pre&gt;
&lt;p&gt;Next we need to use Capistrano&amp;#8217;s &lt;code&gt;capify&lt;/code&gt; command to generate the files that we&amp;#8217;ll need to get the app deployed on our server.&lt;/p&gt;
&lt;pre&gt;
$ capify .
[add] writing './Capfile'
[add] writing './config/deploy.rb'
&lt;/pre&gt;
&lt;p&gt;So you&amp;#8217;ll see that it created two files, we&amp;#8217;ll be focusing on &lt;code&gt;deploy.rb&lt;/code&gt; for now. Let&amp;#8217;s just remove everything in that file and start from scratch. First let&amp;#8217;s get the application name in there:&lt;/p&gt;
&lt;pre&gt;
set :application, &quot;blog&quot;
&lt;/pre&gt;&lt;pre&gt;
set :scm, :git
set :repository, &quot;git@github.com:jpsilvashy/blog.git&quot;
set :scm_passphrase, &quot;&quot;
&lt;/pre&gt;
&lt;p&gt;Also remember we&amp;#8217;re just using the &lt;code&gt;ubuntu&lt;/code&gt; user, in a more serious situation I&amp;#8217;d probably create a user just for deploying the app, this would allow us to sort of &amp;#8220;silo&amp;#8221; the users activty and access to stopping and starting other services, or worse running some malicous code on the server.&lt;/p&gt;
&lt;pre&gt;
set :user, &quot;ubuntu&quot;
&lt;/pre&gt;
&lt;p&gt;Since, in our case, the server will house the application itself, the webserver, and the database, we have to tell capistrano that all our tasks related to deploying these services are on the same server, let&amp;#8217;s just say the domain name we have is &amp;#8220;my_cat_blog.com&amp;#8221;, you could also use your IP address as a string here. We&amp;#8217;ll also add the path to where the app should be &lt;code&gt;deployed_to&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;
server &quot;my_cat_blog.com&quot;, :app, :web, :db, :primary =&gt; true
set :deploy_to, &quot;/var/www/blog&quot;
&lt;/pre&gt;
&lt;p&gt;&lt;a href='https://gist.github.com/3205604'&gt;Here is the complete &lt;code&gt;deploy.rb&lt;/code&gt;&lt;/a&gt;. Remeber to update the variables to match your servers hostname or IP address.&lt;/p&gt;

&lt;h2 id='testing_out_our_deploy_recipe'&gt;Testing Out Our Deploy Recipe&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s see if our recipe works! From your project root on your local machine, run:&lt;/p&gt;
&lt;pre&gt;
cap deploy:setup
&lt;/pre&gt;
&lt;p&gt;This will connect to the server, and create all the directories you&amp;#8217;ll need when we actually deploy the app. Next we need to check to see if the permissions are okay with the directories in question, let&amp;#8217;s run:&lt;/p&gt;
&lt;pre&gt;
cap deploy:check
&lt;/pre&gt;
&lt;p&gt;You&amp;#8217;ll probably run into a few issues here, when setting up my server from scratch, this is what I recieve:&lt;/p&gt;
&lt;pre&gt;
The following dependencies failed. Please check them and try again:
--&gt; You do not have permissions to write to `/var/www/blog'. (50.11.131.12)
--&gt; You do not have permissions to write to `/var/www/blog/releases'. (50.11.131.12)
--&gt; `git' could not be found in the path (50.11.131.12)
&lt;/pre&gt;
&lt;p&gt;Let&amp;#8217;s take care of fixing the permissions for those files first. SSH to your server.&lt;/p&gt;
&lt;pre&gt;
ssh ubuntu@50.11.131.12
&lt;/pre&gt;
&lt;p&gt;Go to the directory you&amp;#8217;ve set your &lt;code&gt;deploy_to&lt;/code&gt; path. There we&amp;#8217;ll change the owner and group of the folders that threw the errors.&lt;/p&gt;
&lt;pre&gt;
cd /var/www/
sudo chown -R ubuntu ./
sudo chgrp -R ubuntu ./
&lt;/pre&gt;
&lt;p&gt;Okay! The permissions should be okay, now lets install Git.&lt;/p&gt;
&lt;pre&gt;
sudo apt-get install git
&lt;/pre&gt;
&lt;p&gt;Now on your local machine run &lt;code&gt;cap deploy:check&lt;/code&gt; again, you should recieve something like this:&lt;/p&gt;
&lt;pre&gt;
You appear to have all necessary dependencies installed
&lt;/pre&gt;
&lt;h2 id='deploying_your_code'&gt;Deploying Your Code&lt;/h2&gt;

&lt;p&gt;So we&amp;#8217;ve almost got our application code deployed to our new web server, however, there are several missing pieces. There are a couple overarching issues.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we have no web server&lt;/li&gt;

&lt;li&gt;we have no database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we address the web sever or database let&amp;#8217;s just get our ruby code on our server. That way, as we work on our application, we can continuously deploy the app. This deployment methodology is sometimes referred to as &lt;a href='http://programmer.97things.oreilly.com/wiki/index.php/Deploy_Early_and_Often'&gt;&amp;#8220;Deploy Early and Often&amp;#8221;&lt;/a&gt;. After this step, and the next post in the series we can get our web server and database running.&lt;/p&gt;

&lt;p&gt;On your server you&amp;#8217;ll need to have &lt;code&gt;(bundler)[http://gembundler.com]&lt;/code&gt; installed, this is really the only gem we&amp;#8217;ll install this way, as Bundler itself will manage all our other gems.&lt;/p&gt;
&lt;pre&gt;
sudo gem install bundler
&lt;/pre&gt;
&lt;p&gt;Make sure you have the &lt;code&gt;bundle&lt;/code&gt; binary available from your shell.&lt;/p&gt;
&lt;pre&gt;
$ bundle -v
Bundler version 1.1.5
&lt;/pre&gt;
&lt;p&gt;Then we need to generate an SSH key, we&amp;#8217;ll give that to Github so our server can pull the latest version of our application code when we deploy the application.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Setting up Ubuntu with Ruby 1.9.3 on Amazon EC2</title>
   <link href="http://jpsilvashy.com/posts/setting-up-ubuntu-with-ruby-193-on-amazon-ec2"/>
   <updated>2012-07-29T00:00:00-07:00</updated>
   <id>http://jpsilvashy.com/posts/setting-up-ubuntu-with-ruby-193-on-amazon-ec2</id>
   <content type="html">&lt;div class='leader_note'&gt;
	This is post 1 of 2, in my series on deploying Rails applications. &lt;a href='/posts/deploying-a-rails-application-on-amazon-ec2/'&gt;Skip to part 2 &amp;rarr;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;If you haven&amp;#8217;t deployed a Ruby application on Amazon Web Services EC2 yet, you&amp;#8217;re really missing out. It&amp;#8217;s largely a simple and enjoyable process. I&amp;#8217;m always impressed at how quickly servers can be provisioned on EC2. This is a guide on how I typically get a new project going on EC2.&lt;/p&gt;

&lt;h2 id='provisioning_the_server_on_ec2'&gt;Provisioning the Server on EC2&lt;/h2&gt;

&lt;p&gt;Head over to &lt;a href='http://aws.amazon.com'&gt;aws.amazon.com&lt;/a&gt; to get started. Log-in then go to the &lt;a href='https://console.aws.amazon.com/ec2/'&gt;EC2 panel&lt;/a&gt;, click Launch Instance. Choose the Classic Wizard, scroll and choose Ubuntu Server 12.04 LTS (Note that it selects the 64 bit version by default, we&amp;#8217;ll use that one). LTS (Long Term Support) releases are always the better choice because they&amp;#8217;ll receive security and bug fixes for 5 years.&lt;/p&gt;

&lt;p&gt;I typically choose to launch a Small Instance (m1.small) when I&amp;#8217;m just getting a project started. A Small Instance will cost about $60/mo. Click continue, next you&amp;#8217;ll be on the Storage Device Configuration, I typically leave the volume size at 8GiB. If my server is going to have some sort of persistent datastore, like MySQL or MongoDB, I&amp;#8217;d probably bump the size of the volume up accordingly. Click Continue again.&lt;/p&gt;

&lt;p&gt;Now you have the option to leave a name for your instance, I&amp;#8217;m naming mine &lt;code&gt;blog&lt;/code&gt;, and continue to the next step. I usually create a new key pair for each server just to have tighter control of access. It really depends on how your manage access to your servers. In our case, we&amp;#8217;ll name it &lt;code&gt;blog&lt;/code&gt;, and download the key pair, don&amp;#8217;t lose this file, it&amp;#8217;ll probably be named &lt;code&gt;blog.pem&lt;/code&gt;. Click continue.&lt;/p&gt;

&lt;p&gt;Create a new Security Group. Let&amp;#8217;s just name it the same as the instance, blog (you&amp;#8217;re also required to leave a description). Since we&amp;#8217;ll be using a web server (HTTP), we&amp;#8217;ll need port &lt;code&gt;80&lt;/code&gt; open, as well as &lt;code&gt;22&lt;/code&gt; so we can SSH to the server.&lt;/p&gt;

&lt;p&gt;The last page of the setup process is just a summary of the instance that&amp;#8217;s about to be provisioned, if everything looks good, &lt;em&gt;launch it!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before we get started let&amp;#8217;s assign our server an Elastic IP address, click Elastic IPs in the left navigation menu. Allocate a new address then associate it with your EC2 Instance.&lt;/p&gt;

&lt;p&gt;Next click Instances in the navigation menu, and take a look at your instance, it&amp;#8217;s state should now say &lt;strong&gt;running&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id='setting_up_the_server'&gt;Setting up the Server&lt;/h2&gt;

&lt;p&gt;Now fire up your terminal. Let&amp;#8217;s first configure our SSH client so we don&amp;#8217;t have to provide our credentials all the time. I usually keep all my key files in the same directory. So open up &lt;code&gt;~/.ssh/config&lt;/code&gt;, mine looks like this for our blog project:&lt;/p&gt;
&lt;pre&gt;
Host 50.11.131.12
  User ubuntu
  IdentityFile /Users/jpsilvashy/Projects/aws_keypairs/blog.pem
&lt;/pre&gt;
&lt;p&gt;Lastly before you can SSH to your new server change the permissions of the key pair file to 600.&lt;/p&gt;
&lt;pre&gt;
chmod 600 /Users/jpsilvashy/Projects/aws_keypairs/blog.pem
&lt;/pre&gt;
&lt;p&gt;Next, SSH to the server as the &lt;code&gt;ubuntu&lt;/code&gt; user.&lt;/p&gt;
&lt;pre&gt;
ssh ubuntu@50.11.131.12
&lt;/pre&gt;
&lt;p&gt;Okay, you should be logged into the server now! Good job! Now it&amp;#8217;s time to get our hands dirty. We&amp;#8217;ll be using &lt;code&gt;apt-get&lt;/code&gt;, to setup most of the packages we&amp;#8217;ll need. Let&amp;#8217;s first make sure we have all the latest updates for Ubuntu.&lt;/p&gt;
&lt;pre&gt;
sudo apt-get update
sudo apt-get upgrade
&lt;/pre&gt;
&lt;p&gt;Next, let&amp;#8217;s get some of the basic packages that we&amp;#8217;ll need installed, this will help with the remainder of the setup.&lt;/p&gt;
&lt;pre&gt;
sudo apt-get install build-essential
&lt;/pre&gt;
&lt;p&gt;So to clear things up, that&amp;#8217;ll install the complication tools, like GCC for example, apt will need these to build the other packages.&lt;/p&gt;

&lt;h2 id='installing_ruby'&gt;Installing Ruby&lt;/h2&gt;

&lt;p&gt;Lastly, we&amp;#8217;ll need to get Ruby setup, but before we can actually install Ruby there are a few basic libraries that you are likely to need.&lt;/p&gt;
&lt;pre&gt;
sudo apt-get install openssl libreadline6 libreadline6-dev \
zlib1g zlib1g-dev libssl-dev libyaml-dev libxml2-dev \
libxslt-dev autoconf libc6-dev ncurses-dev
&lt;/pre&gt;
&lt;p&gt;That takes care of the basic dependencies, now we&amp;#8217;ll install Ruby &lt;strong&gt;1.9.3&lt;/strong&gt;, now this point is really important, even though the package name in the apt repository is &lt;code&gt;ruby1.9.1&lt;/code&gt;, you&amp;#8217;ll actually install Ruby 1.9.3. The reason it&amp;#8217;s named this is a little complicated, but be rest-assured nothing is wrong here and this is the correct name of the package to you want to install.&lt;/p&gt;
&lt;pre&gt;
sudo apt-get install ruby1.9.1
&lt;/pre&gt;
&lt;p&gt;Lastly, be sure you have the currect version:&lt;/p&gt;
&lt;pre&gt;
$ ruby -v
ruby 1.9.3p0 (2011-10-30 revision 33570) [x86_64-linux]
&lt;/pre&gt;
&lt;p&gt;There you go! If the version is &lt;code&gt;ruby 1.9.3p0&lt;/code&gt; or newer, you&amp;#8217;re all setup.&lt;/p&gt;
&lt;div class='leader_note'&gt;
	This is post 1 of 2, in my series on deploying Rails applications. &lt;a href='/posts/deploying-a-rails-application-on-amazon-ec2/'&gt;Go to part 2 &amp;rarr;&lt;/a&gt;
&lt;/div&gt;</content>
 </entry>
 

</feed>